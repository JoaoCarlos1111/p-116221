generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  name            String
  mainDepartment  String
  isAdmin         Boolean          @default(false)
  isActive        Boolean          @default(true)
  isClient        Boolean          @default(false)
  clientProfile   String?
  company         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  cases           Case[]
  departments     UserDepartment[]
  brands          UserBrand[]
}

model Department {
  id              String           @id @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  users           UserDepartment[]
}

model UserDepartment {
  id           String     @id @default(cuid())
  userId       String
  departmentId String
  createdAt    DateTime   @default(now())

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
}

model Brand {
  id        String      @id @default(cuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  users     UserBrand[]
  cases     Case[]
}

model UserBrand {
  id      String @id @default(cuid())
  userId  String
  brandId String

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand   Brand  @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId])
}

model Case {
  id             String    @id @default(cuid())
  code           String    @unique
  debtorName     String
  totalAmount    Float
  currentPayment Float
  status         String
  daysInColumn   Int       @default(0)
  assignedTo     User      @relation(fields: [userId], references: [id])
  userId         String
  brandId        String?
  brand          Brand?    @relation(fields: [brandId], references: [id])
  payments       Payment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  documents      Document[]
  emailLogs      EmailLog[]
  interactions   Interaction[]
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  status    String
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id          String     @id @default(cuid())
  name        String
  description String?
  fileName    String
  type        String     // NOTIFICATION, AGREEMENT, etc
  fields      Json       // Campos dinâmicos do template
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  documents   Document[]

  @@map("templates")
}

model Document {
  id          String   @id @default(cuid())
  caseId      String
  templateId  String
  fileName    String
  filePath    String
  type        String   // PDF, DOCX
  generatedAt DateTime @default(now())

  case     Case     @relation(fields: [caseId], references: [id])
  template Template @relation(fields: [templateId], references: [id])

  @@map("documents")
}

model EmailLog {
  id        String   @id @default(cuid())
  caseId    String
  to        String
  subject   String
  content   String   @db.Text
  messageId String?
  status    String   // SENT, FAILED, PENDING
  error     String?
  sentAt    DateTime @default(now())

  case Case @relation(fields: [caseId], references: [id])

  @@map("email_logs")
}

model Interaction {
  id        String   @id @default(cuid())
  caseId    String?
  type      String   // WHATSAPP, EMAIL, PHONE, MANUAL
  direction String   // INBOUND, OUTBOUND
  content   String   @db.Text
  metadata  Json?    // Dados específicos do canal (números, IDs, etc.)
  attachments String[] // URLs ou paths de arquivos anexados
  createdBy String?
  createdAt DateTime @default(now())

  case Case? @relation(fields: [caseId], references: [id])

  @@map("interactions")
}