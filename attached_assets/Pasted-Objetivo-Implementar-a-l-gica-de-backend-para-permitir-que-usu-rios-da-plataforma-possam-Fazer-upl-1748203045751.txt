Objetivo
Implementar a l√≥gica de backend para permitir que usu√°rios da plataforma possam:

Fazer upload de arquivos .docx com campos din√¢micos no formato {{nome_campo}}

Salvar esses arquivos como templates

Gerar documentos personalizados em PDF com base nesses templates, preenchendo os campos com os dados reais de um caso

Exibir e permitir o download do PDF gerado

üîÑ Fluxo Backend (L√≥gica T√©cnica Detalhada)
Upload do Template

Recebe arquivo .docx via formul√°rio

Extrai os campos din√¢micos no padr√£o {{nome_campo}} (ex: {{nome_cliente}}, {{endereco_infrator}}, etc.)

Armazena no banco:

Nome do template

Tipo do template (Notifica√ß√£o, Acordo, etc.)

Lista dos campos reconhecidos

Arquivo original .docx

Data de cria√ß√£o

Retorna para o frontend os campos reconhecidos e uma confirma√ß√£o de que o template foi salvo

Gera√ß√£o de Documento a partir de um Caso

Disparado por eventos autom√°ticos no sistema:

Se tipo = Notifica√ß√£o Extrajudicial ‚Üí gerar ap√≥s caso aprovado pelo cliente

Se tipo = Acordo Extrajudicial ‚Üí gerar ap√≥s caso mover para ‚ÄúProposta aceita‚Äù

Carrega o template correspondente

Substitui os campos {{...}} por dados do caso (ex: nome do cliente, endere√ßo, n√∫mero do processo, etc.)

Gera um novo arquivo PDF com base no .docx preenchido

Armazena o PDF vinculado ao caso

Disponibiliza o link de visualiza√ß√£o e download no frontend do caso

üß© Exemplo de Campos Din√¢micos Suportados
O backend deve substituir:

txt
Copiar
Editar
{{nome_cliente}}, {{nome_marca}}, {{numero_processo}}, {{endereco_infrator}}, {{data}}, {{nome_advogado}}, {{codigo_caso}}, {{tipo_infracao}}, {{link_arquivo}}
üìÇ Estrutura de Banco Recomendada (sugest√£o)
Tabela: templates

id

nome

tipo (enum: notificacao, acordo, outros)

campos_reconhecidos (array de strings)

arquivo_docx_url

criado_em

Tabela: documentos_gerados

id

template_id

caso_id

arquivo_pdf_url

gerado_em

üõ†Ô∏è Tecnologias sugeridas (dependendo do stack)
.docx parsing: python-docx ou docxtpl

PDF rendering: docx2pdf, LibreOffice headless, ou integra√ß√£o com servi√ßo externo

Armazenamento: S3, Cloudinary ou local

API: FastAPI, Flask, Node.js (com multer, etc.)