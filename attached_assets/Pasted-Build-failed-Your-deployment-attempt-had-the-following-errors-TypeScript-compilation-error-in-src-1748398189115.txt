Build failed
Your deployment attempt had the following errors:
TypeScript compilation error in src/server/routes/events.ts file
Missing closing braces in events.ts route file
The build command is failing which prevents deployment
Assistant suggestions
  }
);

// POST /api/events/mark-processed - Marcar eventos como processados
router.post('/mark-processed',
  authMiddleware,
  validate(markProcessedSchema),
  async (req, res) => {
    try {
      const { eventIds } = req.body;

      await Promise.all(
        eventIds.map(eventId => markEventAsProcessed(eventId))
      );

      return res.json({ 
        success: true, 
        message: `${eventIds.length} eventos marcados como processados` 
      });
    } catch (error) {
      console.error('Error marking events as processed:', error);
      res.status(500).json({ 
        error: 'Erro ao marcar eventos como processados',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }
);

// GET /api/events/stats - Estatísticas de eventos
router.get('/stats',
  authMiddleware,
  async (req, res) => {
    try {
      const unprocessedEvents = await getUnprocessedEvents();
      
      const stats = {
        totalUnprocessed: unprocessedEvents.length,
        byType: unprocessedEvents.reduce((acc, event) => {
          acc[event.eventType] = (acc[event.eventType] || 0) + 1;
          return acc;
        }, {} as Record<string, number>),
        byEntity: unprocessedEvents.reduce((acc, event) => {
          acc[event.entityType] = (acc[event.entityType] || 0) + 1;
          return acc;
        }, {} as Record<string, number>)
  }
);

// POST /api/events/mark-processed - Marcar eventos como processados
router.post('/mark-processed',
  authMiddleware,
  validate(markProcessedSchema),
  async (req, res) => {
    try {
      const { eventIds } = req.body;

      await Promise.all(
        eventIds.map(eventId => markEventAsProcessed(eventId))
      );

      return res.json({ 
        success: true, 
        message: `${eventIds.length} eventos marcados como processados` 
      });
    } catch (error) {
      console.error('Error marking events as processed:', error);
      res.status(500).json({ 
        error: 'Erro ao marcar eventos como processados',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }
);

// GET /api/events/stats - Estatísticas de eventos
router.get('/stats',
  authMiddleware,
  async (req, res) => {
    try {
      const unprocessedEvents = await getUnprocessedEvents();
      
      const stats = {
        totalUnprocessed: unprocessedEvents.length,
        byType: unprocessedEvents.reduce((acc, event) => {
          acc[event.eventType] = (acc[event.eventType] || 0) + 1;
          return acc;
        }, {} as Record<string, number>),
        byEntity: unprocessedEvents.reduce((acc, event) => {
          acc[event.entityType] = (acc[event.entityType] || 0) + 1;
          return acc;
        }, {} as Record<string, number>)
      };
      
      return res.json(stats);
    } catch (error) {
      console.error('Error fetching event stats:', error);
      return res.status(500).json({
        error: 'Erro ao buscar estatísticas de eventos',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }
);

export default router;
const io = new SocketIOServer(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['websocket', 'polling']
});

setSocketIO(io);

// Initialize services
const io = new SocketIOServer(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['websocket', 'polling']
});

setSocketIO(io);

// Initialize services

// Listen on specified port
const PORT = process.env.PORT || 8080;
server.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
});